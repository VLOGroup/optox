import setuptools
from setuptools.dist import Distribution
import distutils
import os
import sys
import subprocess

import tensorflow as tf

# If precompiled tensorflow isused, one has to destinguish between "tensorflow" and "tensorflow-gpu"
tfCPU = not subprocess.call(["pip","-q","show","tensorflow"] )
tfGPU = not subprocess.call(["pip","-q","show","tensorflow-gpu"] )
if tfCPU:
  tfstr = "tensorflow == {}".format(tf.VERSION)
if tfGPU:
  tfstr = "tensorflow-gpu == {}".format(tf.VERSION)
if (tfGPU and tfCPU) or not (tfGPU or tfCPU):
  tfstr = ""
  assert False, "\n\nunexpected error, is tensorflow or tensorflow-gpu installed with pip?\n\n"
  exit(1)
print ("=>required tensorflow for pip: %s\n"% tfstr)


# define requirements
REQUIRED_PACKAGES = [
    tfstr, # tensorflow or tensorflow-gpu
]

class BinaryDistribution(Distribution):
    def has_ext_modules(self):
        return True

setuptools.setup(
    name='optotf',
    version='0.2.0',
    author="Erich Kobler, Markus Hofinger, Kerstin Hamernik",
    author_email="erich.kobler@icg.tugraz.at, markus.hofinger@icg.tugraz.at, kerstin.hamernik@icg.tugraz.at",
    description="TensorFlow wrappers for optoX library",
    # package_dir={"optotf": os.path.join(".", "optotf"),},
    platform=distutils.util.get_platform(),
    packages=["optotf", "optotf.nabla", "optotf.demosaicing"],
    package_dir={"optotf": "./optotf",
                 "optotf.nabla": "./optotf/nabla",
                 "optotf.demosaicing": "./optotf/demosaicing",},
    include_package_data=True,
    package_data={"optotf.nabla": ["./tf_nabla_operator.so"],
                  "optotf.demosaicing": ["./tf_demosaicing_operator.so"]},
    install_requires=REQUIRED_PACKAGES,
    distclass=BinaryDistribution,
    zip_safe=False,
)

