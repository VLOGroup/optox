from setuptools import setup, Extension
from setuptools.command.build_ext import build_ext
import os
import sys
import setuptools


class get_numpy_include(object):
    """Helper class to determine the numpy include path
    The purpose of this class is to postpone importing numpy
    until it is actually installed, so that the ``get_include()``
    method can be invoked. """

    def __init__(self):
        pass

    def __str__(self):
        import numpy
        return numpy.get_include()


class get_pybind_include(object):
    """Helper class to determine the pybind11 include path
    The purpose of this class is to postpone importing pybind11
    until it is actually installed, so that the ``get_include()``
    method can be invoked. """

    def __init__(self, user=False):
        self.user = user

    def __str__(self):
        import pybind11
        return pybind11.get_include(self.user)


# As of Python 3.6, CCompiler has a `has_flag` method.
# cf http://bugs.python.org/issue26689
def has_flag(compiler, flagname):
    """Return a boolean indicating whether a flag name is supported on
    the specified compiler.
    """
    import tempfile
    with tempfile.NamedTemporaryFile('w', suffix='.cpp') as f:
        f.write('int main (int argc, char **argv) { return 0; }')
        try:
            compiler.compile([f.name], extra_postargs=[flagname])
        except setuptools.distutils.errors.CompileError:
            return False
    return True


def cpp_flag(compiler):
    """Return the -std=c++[11/14] compiler flag.
    The c++14 is prefered over c++11 (when it is available).
    """
    if has_flag(compiler, '-std=c++11'):
        return '-std=c++11'
    else:
        raise RuntimeError('Unsupported compiler -- at least C++11 support '
                           'is needed!')


class BuildExtension(build_ext):
    """A custom build extension for adding compiler-specific options."""
    c_opts = {
        'msvc': ['/EHsc'],
        'unix': [],
    }

    if sys.platform == 'darwin':
        c_opts['unix'] += ['-stdlib=libc++', '-mmacosx-version-min=10.7']

    def build_extensions(self):
        ct = self.compiler.compiler_type
        opts = self.c_opts.get(ct, [])
        if ct == 'unix':
            opts.append('-DVERSION_INFO="%s"' % self.distribution.get_version())
            opts.append(cpp_flag(self.compiler))
            if has_flag(self.compiler, '-fvisibility=hidden'):
                opts.append('-fvisibility=hidden')
        elif ct == 'msvc':
            opts.append('/DVERSION_INFO=\\"%s\\"' % self.distribution.get_version())
        for ext in self.extensions:
            ext.extra_compile_args = opts
        build_ext.build_extensions(self)

setup(
    name='optopy',
    version='0.2.0',
    author="Erich Kobler",
    author_email="erich.kobler@icg.tugraz.at",
    packages=["optopy",],
    package_dir={"optopy": os.path.join("${CMAKE_CURRENT_SOURCE_DIR}", "optopy"),},
    include_dirs=[],
    ext_package="_ext",
    ext_modules=[
        Extension("py_nabla_operator", [
            os.path.join("${CMAKE_CURRENT_SOURCE_DIR}", "py_nabla_operator.cpp"),
            ],
            include_dirs=["${OPTOX_INCLUDE_DIR}",
                "${CUDA_INCLUDE_DIRS}",
                get_numpy_include(),
                get_pybind_include(),
            ],
            library_dirs=["${OPTOX_LIBRARY_DIR}",
                os.path.join("${CUDA_TOOLKIT_ROOT_DIR}", "lib64"),],
            runtime_library_dirs=["${OPTOX_LIBRARY_DIR}",
                os.path.join("${CUDA_TOOLKIT_ROOT_DIR}", "lib64"),],
            libraries=["optox", "cudart"]
        ),
    ],
    cmdclass={
        'build_ext': BuildExtension
    },
    install_requires=[
        "numpy >= 1.15",
        'pybind11>=2.2',
    ],
)